/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'    
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.4'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'net.java.linoleum', name: 'jcterm', version: '0.0.11'  
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
  	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    
       
    compile files('lib/weblaf-complete-1.29.jar')

	//classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    // project libraries
    flatDir {
       dirs 'libs'
   }
}

jar {
    manifest {
        attributes ('Main-Class': 'fr.jhamon.scpbrowser.ScpBrowser',
                    'Author': 'J.Hamon')
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//task proguard(type: ProGuardTask, dependsOn: 'obfuscatedJar') {
//    configuration 'proguard.txt'
// 
//    injars "$buildDir/libs/${fullJavaName}-${version}.jar"
//    outjars "$buildDir/libs/${javaName}-${version}.jar"
// 
//    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//    libraryjars configurations.compile.find { it.name.startsWith("commons-") }
//    libraryjars configurations.compile.find { it.name.startsWith("jsch") }
//    libraryjars configurations.compile.find { it.name.startsWith("jcterm") }
//}
// 
//task obfuscate(dependsOn: tasks.withType(ProGuardTask)) << {}

